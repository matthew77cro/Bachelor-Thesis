Rays in Unity :

public IEnumerable<Ray> Rays()
{
	Vector3 rayStart = transform.position + transform.TransformVector(new Vector3(0, 0.4f, 0.7f));

	Vector3 rayDir = Quaternion.AngleAxis(-FOV / 2, transform.up) * transform.forward;
	Vector3 verticalRotationAxis = Quaternion.AngleAxis(-FOV / 2, transform.up) * transform.right;
	Quaternion rotationX = Quaternion.AngleAxis(FOV / (RAYS_PER_ROW - 1), transform.up);

	for (int i = 0; i < RAYS_PER_ROW; i++)
	{

		Vector3 rayD = Quaternion.AngleAxis(-FOV / 2, verticalRotationAxis) * rayDir;
		Quaternion rotationY = Quaternion.AngleAxis(FOV / (RAYS_ROWS - 1), verticalRotationAxis);

		for (int j = 0; j < RAYS_ROWS; j++)
		{

			yield return new Ray(rayStart, rayD);
			rayD = rotationY * rayD;

		}

		rayDir = rotationX * rayDir;
		verticalRotationAxis = rotationX * verticalRotationAxis;

	}
}

Then in Update() :

foreach (var ray in Rays())
{
	Debug.DrawRay(ray.origin, ray.direction * 2, Color.magenta, 0, false);
}